#!/usr/bin/env python

import json
import os

def generate_waybar_css(colors_file, output_css_file):
    try:
        with open(colors_file, 'r') as f:
            colors = json.load(f)['colors']

        background = colors['color0']
        foreground = colors['color7']
        accent = colors['color3']
        color0 = colors['color0']
        color1 = colors['color1']
        color2 = colors['color2']
        color3 = colors['color3']
        color4 = colors['color4']
        color5 = colors['color5']
        color6 = colors['color6']
        color7 = colors['color7']
        color8 = colors['color8']

        #  Use RGBA for background to set transparency.
        #  Extract RGB components from the hex color.
        r = int(background[1:3], 16)
        g = int(background[3:5], 16)
        b = int(background[5:7], 16)
        alpha = 0.7  # Adjust this value for desired transparency (0.0 to 1.0)
        background_rgba = f"rgba({r}, {g}, {b}, {alpha})"
        print("background: ", background)

        css_content = f"""
/* Generated by waybar-style.py */
window#waybar {{
     background-color: {background_rgba};
     color: {foreground};
     font-family: "monospace", "Font Awesome 6 Free";
     font-size: 12px;
     border-radius: 10px;
     border: 2px solid {accent};
     margin: 5px 192px;
}}

#custom-start {{
    color: {accent};
    font-family: "monospace", "Font Awesome 6 Free";
    font-size: 12px;
}}

#custom-end{{
    color: {accent};
    font-family: "monospace", "Font Awesome 6 Free";
    font-size: 12px;
}}

#custom-cava {{
    color: {accent};
    font-family: "monospace", "Font Awesome 6 Free";
    font-size: 12px;
}}

/* Workspaces */
#workspaces {{
    padding: 0 10px;
    background-color: transparent; /* Make workspaces module background transparent */
}}

#workspaces button {{
    background-color: transparent;
    color: {accent};
    border: none;
    border-radius: 5px;
}}

#workspaces button.active {{
    color: {foreground};
    background-color: {accent};
}}

#workspaces button.urgent {{
    color: {color1};
}}

/* Window Title */
#window {{
    padding: 0 15px;
    background-color: transparent;
}}

/* Battery */
#battery {{
    padding: 0 10px;
    background-color: transparent;
    color: {foreground};
}}

#battery.charging {{
    color: {color2};
}}

#battery.warning:not(.charging) {{
    color: {color4};
}}

#battery.critical:not(.charging) {{
    color: {color1};
}}

/* Clock */
#clock {{
    padding: 0 10px;
    background-color: transparent;
    color: {accent};
}}

/* CPU */
#cpu {{
    padding: 0 10px;
    background-color: transparent;
    color: {accent};
}}

/* Memory */
#memory {{
    padding: 0 10px;
    background-color: transparent;
    color: {accent};
}}

/* Temperature */
#temperature {{
    padding: 0 10px;
    background-color: transparent;
    color: {accent};
}}

#temperature.critical {{
    color: {color1};
}}

/* Backlight */
#backlight {{
    padding: 0 10px;
    background-color: transparent;
    color: {accent};
}}

/* Network */
#network {{
    padding: 0 10px;
    background-color: transparent;
    color: {accent};
}}

#network.disconnected {{
    color: {color1};
}}

/* Pulseaudio */
#pulseaudio {{
    padding: 0 10px;
    background-color: transparent;
    color: {accent};
}}

#pulseaudio.muted {{
    color: {color4};
}}

/* Tray */
#tray {{
    padding: 0 5px;
}}

#tray > .passive {{
    color: {accent};
}}

#tray > .needs-attention {{
    color: {color1};
}}

/* Custom Media */
#custom-media {{
    padding: 0 10px;
    background-color: transparent;
    color: {accent};
}}

/* Custom Power */
#custom-power {{
    padding: 0 10px;
    background-color: transparent;
    color: {accent};
}}

/* Idle Inhibitor */
#idle_inhibitor {{
    padding: 0 10px;
    background-color: transparent;
    color: {accent};
}}

/* Keyboard State */
#keyboard-state {{
    padding: 0 10px;
    background-color: transparent;
    color: {accent};
}}

/* Hyprland Mode */
#hyprland-mode {{
    padding: 0 10px;
    background-color: transparent;
    color: {accent};
}}

/* Hyprland Language */
#hyprland-language {{
    padding: 0 10px;
    background-color: transparent;
    color: {accent};
}}

/* Hyprland Scratchpad */
#hyprland-scratchpad {{
    padding: 0 10px;
    background-color: transparent;
    color: {accent};
}}

/* Power Profiles Daemon */
#power-profiles-daemon {{
    padding: 0 10px;
    background-color: transparent;
    color: {accent};
}}
"""

        with open(output_css_file, 'w') as outfile:
            outfile.write(css_content)

    except FileNotFoundError:
        print(f"Error: {colors_file} not found.")
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from {colors_file}.")
    except KeyError as e:
        print(f"Error: Key '{e}' not found in {colors_file}.")

if __name__ == "__main__":
    colors_file = os.path.expanduser("~/.cache/wal/colors.json")
    output_css_file = os.path.expanduser("~/.config/waybar/style.css")
    generate_waybar_css(colors_file, output_css_file)

